package ca.uqac.lif.ecp.atomic;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;

import ca.uqac.lif.ecp.CoverageMetric;
import ca.uqac.lif.ecp.Edge;
import ca.uqac.lif.ecp.GreedyTraceGenerator;
import ca.uqac.lif.ecp.Trace;
import ca.uqac.lif.ecp.graphs.Vertex;

/**
 * Greedy generator when the input specification is a finite-state automaton.
 * In such a case, candidate traces are generated by performing a random walk
 * in the given automaton.
 * @author Sylvain Hall√©
 */
public class GreedyAutomatonGenerator extends GreedyTraceGenerator<AtomicEvent>
{
	/**
	 * The automaton used
	 */
	protected final Automaton m_automaton;
	
	/**
	 * Creates a greedy generator.
	 * @param aut The automaton specification
	 * @param random A random number generator used to pick events and values
	 * @param metric The coverage metric against which to compare candidate
	 * solutions
	 */
	public GreedyAutomatonGenerator(Automaton aut, Random random, CoverageMetric<AtomicEvent,Float> metric) 
	{
		super(random, metric);
		m_automaton = aut;
	}
	
	@Override
	public int pickLength()
	{
		return m_random.nextInt(m_automaton.getEdgeCount());
	}

	@Override
	public Trace<AtomicEvent> generateTrace(int length) 
	{
		Trace<AtomicEvent> trace = new Trace<AtomicEvent>();
		Vertex<AtomicEvent> current_vertex = m_automaton.getInitialVertex();
		for (int steps = 0; steps < length; steps++)
		{
			Set<Edge<AtomicEvent>> outgoing_edges = current_vertex.getEdges();
			if (outgoing_edges.isEmpty())
			{
				// Dead end: stop 
				break;
			}
			List<Edge<AtomicEvent>> ordered_edges = new ArrayList<Edge<AtomicEvent>>();
			ordered_edges.addAll(outgoing_edges);
			int chosen_edge_index = m_random.nextInt(outgoing_edges.size());
			Edge<AtomicEvent> chosen_edge = ordered_edges.get(chosen_edge_index);
			trace.add(chosen_edge.getLabel());
			current_vertex = m_automaton.getVertex(chosen_edge.getDestination());
		}
		return trace;
	}
}
